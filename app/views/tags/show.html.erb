<div class="flex flex-col mt-6 m-8">
  <div class="flex justify-center w-full ">
    <!-- プルダウンメニュー -->
    <select id="tag-select" class="w-1/4 h-12 text-3xl text-white font-bold text-center text-nowrap rounded-lg flex items-center justify-center bg-html">
      <option value="/tags/1" data-color="bg-html">HTML</option>
      <option value="/tags/2" data-color="bg-css">CSS</option>
      <option value="/tags/3" data-color="bg-js">JavaScript</option>
      <option value="/tags/4" data-color="bg-ruby">Ruby on Rails</option>
      <option value="/tags/5" data-color="bg-git">Git</option>
      <option value="/tags/6" data-color="bg-error">エラー</option>
    </select>
  </div>
</div>

  <div id="quiz_content" class="bg-secondary rounded-lg p-6">
    <div class="rounded-lg p-4">
      <div class="flex flex-wrap justify-start gap-6">
        <% @quizzes.each do |quiz| %>
          <%= render partial: "quizzes/lg_card", locals: { quiz: quiz, tags: quiz.tags} %>
        <% end %>
      </div>
    </div>
  </div>
  <!-- ページネーション -->
  <div class="flex justify-center gap-2">
    <div class="join mt-6">
      <button class="join-item btn btn-sm bg-primary text-base-100"><</button>
      <button class="join-item btn btn-sm bg-primary text-base-100">1</button>
      <button class="join-item btn btn-sm bg-accent text-base-100">2</button>
      <button class="join-item btn btn-sm bg-primary text-base-100 pointer-events-none">...</button>
      <button class="join-item btn btn-sm bg-primary text-base-100">9</button>
      <button class="join-item btn btn-sm bg-primary text-base-100">10</button>
      <button class="join-item btn btn-sm bg-primary text-base-100">></button>
    </div>
  </div>
</div>

<script>
// タグ選択状態を初期化する関数
function setInitialTagSelection() {
  const tagSelect = document.getElementById('tag-select');
  if (!tagSelect) return;

  const currentPath = window.location.pathname; // 現在のパスを取得
  const currentTagId = currentPath.match(/\/tags\/(\d+)/)?.[1]; // `/tags/:id`からIDを抽出

  if (currentTagId) {
    const selectedOption = [...tagSelect.options].find(opt => opt.value === `/tags/${currentTagId}`);
    if (selectedOption) {
      selectedOption.selected = true; // 選択状態をセット
      const bgColor = selectedOption.getAttribute('data-color');
      tagSelect.className = `w-1/4 h-12 text-3xl text-white font-bold text-center text-nowrap rounded-lg flex items-center justify-center ${bgColor}`;
    }
  } else {
    // デフォルト選択
    const defaultOption = tagSelect.options[0];
    const bgColor = defaultOption.getAttribute('data-color');
    tagSelect.className = `w-1/4 h-12 text-3xl text-white font-bold text-center text-nowrap rounded-lg flex items-center justify-center ${bgColor}`;
  }
}

// イベントリスナーの設定
function setupTagSelect() {
  const tagSelect = document.getElementById('tag-select');
  const quizContent = document.getElementById('quiz_content');
  if (!tagSelect || !quizContent) return;

  // 背景色変更機能
  tagSelect.addEventListener('change', function () {
    const selectedOption = this.options[this.selectedIndex];
    const bgColor = selectedOption.getAttribute('data-color');
    this.className = `w-1/4 h-12 text-3xl text-white font-bold text-center text-nowrap rounded-lg flex items-center justify-center ${bgColor}`;
  });

  // ページ遷移または非同期リクエスト
  tagSelect.addEventListener('change', function () {
    const selectedOption = this.options[this.selectedIndex];
    const selectedValue = selectedOption.value;

    if (selectedValue.startsWith('/tags/')) {
      // Turbo訪問で遷移
      if (window.location.pathname !== selectedValue) {
        Turbo.visit(selectedValue, { action: "replace" });
      }
    } else {
      // 非同期で `#quiz_content` を更新
      fetch(`/tags/${selectedValue}.json`, {
        headers: {
          "X-Requested-With": "XMLHttpRequest"
        }
      })
        .then(response => {
          if (!response.ok) {
            throw new Error('Network response was not ok');
          }
          return response.json();
        })
        .then(data => {
          quizContent.innerHTML = data.quizzes_html;
        })
        .catch(error => {
          console.error("Error fetching quiz content:", error);
        });
    }
  });
}

// Turboイベントで初期化
document.addEventListener("turbo:load", () => {
  setInitialTagSelection();
  setupTagSelect();
});

document.addEventListener("turbo:render", () => {
  setInitialTagSelection();
  setupTagSelect();
});
</script>